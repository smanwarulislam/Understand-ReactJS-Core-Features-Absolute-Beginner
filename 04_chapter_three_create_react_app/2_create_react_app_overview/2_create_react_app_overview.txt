2. Create React App Overview

Create React App
https://create-react-app.dev/

Create React App
Set up a modern web app by running one command.

GitHub
https://github.com/facebook/create-react-app

· Docs
Get Started
Getting Started | Create React App
https://create-react-app.dev/docs/getting-started/

· Getting Started

Create React App is an officially supported way to create single-page React applications. It offers a modern build setup with no configuration.

# Quick Overview (Quick Start)

npx create-react-app my-app
cd my-app
npm start

If you've previously installed create-react-app globally via npm install -g create-react-app,
we recommend you uninstall the package using npm uninstall -g create-react-app or yarn global remove create-react-app to ensure that npx always uses the latest version.

(npx comes with npm 5.2+ and higher, see instructions for older npm versions)

npx
https://medium.com/@maybekatz/introducing-npx-an-npm-package-runner-55f7d4bd282b

instructions for older npm versions
https://gist.github.com/gaearon/4064d3c23a77c74a3614c498a8bb1c5f

Then open http://localhost:3000/ to see your app.
When you’re ready to deploy to production, create a minified bundle with npm run build.
https://cdn.jsdelivr.net/gh/facebook/create-react-app@27b42ac7efa018f2541153ab30d63180f5fa39e0/screencast.svg

# Get Started Immediately

You don’t need to install or configure tools like webpack or Babel.
They are preconfigured and hidden so that you can focus on the code.

Create a project, and you’re good to go.

# Creating an App

You’ll need to have Node 14.0.0 or later version on your local development machine (but it’s not required on the server).
We recommend using the latest LTS version.
You can use nvm (macOS/Linux) or nvm-windows to switch Node versions between different projects.

nvm
https://github.com/creationix/nvm#installation

nvm-windows
https://github.com/coreybutler/nvm-windows#node-version-manager-nvm-for-windows

To create a new app, you may choose one of the following methods:

# npx
npx create-react-app my-app

(npx is a package runner tool that comes with npm 5.2+ and higher, see instructions for older npm versions)

npx
https://medium.com/@maybekatz/introducing-npx-an-npm-package-runner-55f7d4bd282b

instructions for older npm versions
https://gist.github.com/gaearon/4064d3c23a77c74a3614c498a8bb1c5f

# npm
npm init react-app my-app

npm init <initializer> is available in npm 6+

# Yarn
yarn create react-app my-app

yarn create <starter-kit-package> is available in Yarn 0.25+

yarn create <starter-kit-package>
https://yarnpkg.com/lang/en/docs/cli/create/

# Selecting a package manager

When you create a new app, the CLI will use npm or Yarn to install dependencies, depending on which tool you use to run create-react-app.
For example:

# Run this to use npm
npx create-react-app my-app
# Or run this to use yarn
yarn create react-app my-app

# Output

Running any of these commands will create a directory called my-app inside the current folder.
Inside that directory, it will generate the initial project structure and install the transitive dependencies:

my-app
├── README.md
├── node_modules
├── package.json
├── .gitignore
├── public
│   ├── favicon.ico
│   ├── index.html
│   └── manifest.json
└── src
    ├── App.css
    ├── App.js
    ├── App.test.js
    ├── index.css
    ├── index.js
    ├── logo.svg
    └── serviceWorker.js
    └── setupTests.js

No configuration or complicated folder structures, only the files you need to build your app.
Once the installation is done, you can open your project folder:

cd my-app

# Scripts

Inside the newly created project, you can run some built-in commands:

npm start or yarn start

Runs the app in development mode.
Open http://localhost:3000 to view it in the browser.

The page will automatically reload if you make changes to the code.
You will see the build errors and lint warnings in the console.
https://cdn.jsdelivr.net/gh/marionebl/create-react-app@9f6282671c54f0874afd37a72f6689727b562498/screencast-error.svg

npm test or yarn test

Runs the test watcher in an interactive mode.
By default, runs tests related to files changed since the last commit.

Read more about testing.
https://create-react-app.dev/docs/running-tests

npm run build or yarn build

Builds the app for production to the build folder.
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.

Your app is ready to be deployed.

# User Guide

You can find detailed instructions on using Create React App and many tips in its documentation.

its documentation
https://create-react-app.dev/

# How to Update to New Versions?

Please refer to the User Guide for this and other information.

User Guide
https://create-react-app.dev/docs/updating-to-new-releases/

# Philosophy

· One Dependency:
There is only one build dependency.
It uses webpack, Babel, ESLint, and other amazing projects, but provides a cohesive curated experience on top of them.

· No Configuration Required:
You don't need to configure anything.
A reasonably good configuration of both development and production builds is handled for you so you can focus on writing code.

· No Lock-In:
You can “eject” to a custom setup at any time.
Run a single command, and all the configuration and build dependencies will be moved directly into your project, so you can pick up right where you left off.

# What’s Included?

Your environment will have everything you need to build a modern single-page React app:

· React, JSX, ES6, TypeScript, and Flow syntax support.
· Language extras beyond ES6 like the object spread operator.
· Autoprefixed CSS, so you don’t need -webkit- or other prefixes.
· A fast interactive unit test runner with built-in support for coverage reporting.
· A live development server that warns about common mistakes.
· A build script to bundle JS, CSS, and images for production, with hashes and sourcemaps.
· An offline-first service worker and a web app manifest, meeting all the Progressive Web App criteria.
(Note: Using the service worker is opt-in as of react-scripts@2.0.0 and higher)

service worker
https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API

web app manifest
https://web.dev/add-manifest/

Progressive Web App
https://create-react-app.dev/docs/making-a-progressive-web-app/

· Hassle-free updates for the above tools with a single dependency.

Check out this guide for an overview of how these tools fit together.

this guide
https://github.com/nitishdayal/cra_closer_look

The tradeoff is that these tools are preconfigured to work in a specific way.
If your project needs more customization, you can "eject" and customize it, but then you will need to maintain this configuration.

"eject"
https://create-react-app.dev/docs/available-scripts/#npm-run-eject

# Popular Alternatives

Create React App is a great fit for:

· Learning React in a comfortable and feature-rich development environment.
· Starting new single-page React applications.
· Creating examples with React for your libraries and components.

Here are a few common cases where you might want to try something else:

· If you want to try React without hundreds of transitive build tool dependencies, consider using a single HTML file or an online sandbox instead.

using a single HTML file or an online sandbox instead
https://legacy.reactjs.org/docs/getting-started.html#try-react

· If you need to integrate React code with a server-side template framework like Rails, Django or Symfony,
or if you’re not building a single-page app, consider using nwb, or Neutrino which are more flexible.
For Rails specifically, you can use Rails Webpacker. For Symfony, try Symfony's webpack Encore.

nwb
https://github.com/insin/nwb

Neutrino
https://neutrino.js.org/

Rails Webpacker
https://github.com/rails/webpacker

Symfony's webpack Encore
https://symfony.com/doc/current/frontend/encore/reactjs.html

· If you need to publish a React component, nwb can also do this, as well as Neutrino's react-components preset.

nwb
https://github.com/insin/nwb

also do this
https://github.com/insin/nwb#react-components-and-libraries

Neutrino's react-components preset
https://neutrino.js.org/packages/react-components/

· If you want to do server rendering with React and Node.js, check out Next.js or Razzle.
Create React App is agnostic of the backend, and only produces static HTML/JS/CSS bundles.

Next.js
https://nextjs.org/

Razzle
https://github.com/jaredpalmer/razzle

· If your website is mostly static (for example, a portfolio or a blog), consider using Gatsby or Next.js.
Unlike Create React App, Gatsby pre-renders the website into HTML at build time. Next.js supports both server rendering and pre-rendering.

Gatsby
https://www.gatsbyjs.com/

Next.js
https://nextjs.org/

· Finally, if you need more customization, check out Neutrino and its React preset.

Neutrino
https://neutrino.js.org/

React preset
https://neutrino.js.org/packages/react/

All of the above tools can work with little to no configuration.

If you prefer configuring the build yourself, follow this guide.

follow this guide
https://react.dev/learn/add-react-to-an-existing-project

# React Native

Looking for something similar, but for React Native?
Check out Expo CLI.

Expo CLI
https://github.com/expo/expo-cli