7. Environment Setup Reference

আমরা যদি React (also known as React.js or ReactJS) এর জন্য একটা কাস্টম এনভায়রনমেন্ট তৈরি করতে যাই তাহলে আমাদের মূলত দুইটা টুলস এর সাহাষ্য লাগবে।
আরও অনেক টুলস আছে সেগুলোও এনভায়রনমেন্ট সেটআপ এ অনেক ভূমিকা রাখে তবে Babel (or Babel.js) এবং Webpack ছাড়া এনভায়রনমেন্ট তৈরি করা সম্ভবই না।
তবে অনেকেই Webpack এর বদলে Parcel বা অন্য কোন বান্ডেলার বা প্যাকেজ বিল্ডার ব্যবহার করে থাকেন।

আর খুবই গুরুত্বপূর্ণ একটা টুলস আমাদের দরকার যা ছাড়া এই পুরো প্রোজেক্ট সেটআপটা সম্ভবই না।
যেই টুলসটা সম্পর্কে আমরা ভিডিওতে কোনো কিছু মেনশন করিনি। সেটা হোল নোডজেএস।
Webpack, webpack-dev-server, Hot Module Replacement (HMR) এই সব ফিচারগুলোই রান করবে নোডজেএস এনভায়রনমেন্ট এর ওপরে।
তাই আমাদের পিসিতে নোডজেএস সফটওয়্যারটা ইন্সটল্ড অবস্থায় থাকাটা খুবই জরুরি।
package.json ফাইল, npm, npm scripts এবং dependencies সবকিছুই চলে নোডজেএস এর ওপরে।

আমরা যেই এনভায়রনমেন্টটা তৈরি করেছি সেখানে যে যে ফাইল ছিলো এবং
যেই ফাইলগুলো আমাদের সব সময় লাগবে সেই ফাইলগুলো সম্পর্কে অল্প ভাষায় কিছু তথ্য দেওয়ার চেষ্টা করছি যেন পরবর্তীতে আপনারা রেফারেন্স হিসেবে কাজে লাগাতে পারেন।

প্রয়োজনীয় ফাইলগুলো -

· dist (dir) -
এখানে অনেকগুলো ফাইল থাকে। বিশেষ করে স্ট্যাটিক ফাইলগুলোই এখানে রাখা হয়। যেমন -

  · index.html -
  সিঙ্গেল-পেজ অ্যাপ্লিকেশনে সাধারণত একটি মাত্র এইচটিএমএল ফাইল থাকে। এবং সেটা রাখা হয় স্ট্যাটিক ফাইল হিসেবে।
  যখন সার্ভার এ কোন রিকোয়েস্ট আসে তখন এই ফাইলটা সার্ভ করা হয়। সাধারণত এর ভিতরে কিছুই থাকে না।
  React Application ব্রাউজারে লোড হওয়ার পরে ডাটা লোড করে থাকে।

  · favicon.ico -
  ওয়েবসাইটের Favicon আইকনটাও সাধারণত এই ডিরেক্টরিতে থাকে।

  · bundle.js -
  প্রোডাকশন এ ব্যবহার করার পূর্বে অ্যাপ্লিকেশনকে সাধারণত বিল্ড করা হয়।
  বিল্ড করার পরে প্রোডাকশন রেডি যেই অপ্টিমাইজড জাভাস্ক্রিপ্ট ফাইলটা বের হয় সেটাই মূলত bundle.js.
  বিল্ড এর সময় ডাইনামিক ভাবে এটা index.html ফাইলের সাথে লিংকড হয়ে যায়।
  তাই index.html ফাইল যখন ব্রাউজারে লোড হয় তখন অটোমেটিক্যালি জাভাস্ক্রিপ্ট ফাইলটা পেয়ে যায় এবং জাভাস্ক্রিপ্ট এক্সিকিউট হয়ে ব্রাউজারে কন্টেন্ট রেন্ডার করতে থাকে।

  · style.css -
  ছোট ছোট কম্পোনেন্টকে ডিজাইন করার জন্য যেই স্টাইল ফাইলগুলো ব্যবহার করা হয় সেইগুলো অনেক ক্ষেত্রেই ইনলাইন সিএসএস এর কাজ করে থাকে।
  তবে গ্লোবাল সিএসএস ফাইলগুলো এবং অন্যান্য সিএসএস ফাইলগুলো বিল্ড এর পরে একটা ফাইলে রূপান্তর হয়ে ষায় এবং অটোমেটিক্যালি index.html ফাইল এর সাথে অ্যাটাচড হয়ে যায়।
  এবং যখন ব্রাউজার index.html ফাইলকে লোড করে তখন সিএসএস গুলো লোড হয়ে যায়।

· src (dir) -
একটা অ্যাপ্লিকেশনের সব থেকে ইম্পরট্যান্ট ডিরেক্টরি হচ্ছে এটা। কারণ এখানেই আমরা আমাদের সমস্ত জাভাস্ক্রিপ্ট এবং সিএসএস কোড লিখে থাকি।

· .babelrc (file) -
এই ফাইলটা মূলত Babel (or Babel.js) এর কনফিগারেশন ফাইল।
আপনি যদি কাস্টম ভাবে Babel (or Babel.js) কে কনফিগার করতে চান, নতুন কোনো রুলস যুক্ত করতে চান তাহলে আপনি এই ফাইলে সেটা করতে পারবেন।

· webpack.config.js (file) -
Webpack এর সমস্ত কনফিগারেশন আপনাকে এখানে লিখতে হবে।
যদি অ্যাপ্লিকেশন রানিং থাকা অবস্থায় আপনি এই ফাইলে কোনো পরিবর্তন করেন তাহলে পরিবর্তনটা বোঝার জন্য আপনাকে অ্যাপ্লিকেশন বা webpack-dev-server রিস্টার্ট করতে হবে।

· package.json (file) -
এটা আপনার অ্যাপ্লিকেশন এর কনফিগারেশন বা মেনিফেস্ট ফাইল যা আপনার অ্যাপ্লিকেশনের মেটা ইনফরমেশন গুলোকে রাখবে। যেমন, ভার্সন নাম্বার, বেসিক ডেসক্রিপশন।
এর সাথে সাথে আপনি এই প্রোজেক্টে কোন কোন থার্ড পার্টি লাইব্রেরি বা মডিউল ব্যবহার করেছেন, সেগুলোর ভার্সন নাম্বার কতো সেই সব ইনফরমেশনও সে রাখবে।
এখানে আপনি প্রোজেক্টটা রান করার, বিল্ড করার বা টেস্ট করার কমান্ড স্ক্রিপ্ট আকারে লিখে রাখতে পারেন
যেন কমান্ড লাইন ইন্টারফেস থেকে সিঙ্গেল কমান্ড ব্যবহার করে আপনার অ্যাপ্লিকেশনটা রান বা বিল্ড বা টেস্ট করা যায়।
একটা অ্যাপ্লিকেশনের সব থেকে গুরুত্বপূর্ণ ফাইল হচ্ছে এটা।

· .gitignore (file) -
যে কোনো অ্যাপ্লিকেশনে এখন ভার্সন কন্ট্রোল সিস্টেম ব্যবহার করা হয়।
ভার্সন কন্ট্রোল সিস্টেম প্রোজেক্টের সমস্ত ফাইল ট্র্যাক করতে থাকে, মাল্টিপল ভার্সন তৈরি করতে থাকে।
এর ভিতরে কিছু ফাইল বা ডিরেক্টরি থাকে যা আমাদের ট্র্যাক করার প্রয়োজন নেই।
সেই ফাইলগুলোকে ভার্সন কন্ট্রোল ট্রি থেকে বের করে দেওয়ার জন্য এই ফাইলটা ব্যবহার করা হয়।
যেই সব ফাইল বা ডিরেক্টরি এই ফাইলের ভিতরে লিংক করা থাকবে সেগুলোকে ভার্সন কন্ট্রোল সিস্টেম ট্র্যাক করবে না।

ওপরে যেই ফাইলগুলোর কথা বলা হচ্ছে সেগুলোই হচ্ছে মেইন ফাইল যা একটা বেসিক React (also known as React.js or ReactJS) প্রোজেক্টের জন্য দরকার হয়ে থাকে।
এই ফাইলগুলোতে আসলে কি থাকবে সেটা ভালোভাবে বোঝার জন্য ওই স্পেসিফিক টপিকস সম্পর্কে আরও বিস্তারিত পড়াশোনা করতে হবে।
আর একটা বেসিক ওভারভিউ তো আমরা ভিডিও এর মাধ্যমে দেওয়ার চেষ্টা করেছিই।
আশা করছি আপনারা ব্যাপারগুলো বুঝতে পেরেছেন।
যদি বুঝতে পারেন আর যদি নাও বুঝতে পারেন দুই ক্ষেত্রেই ভিডিওতে যেভাবে দেখানো হয়েছে সেভাবে প্র্যাক্টিক্যাল করে ফেলেন।